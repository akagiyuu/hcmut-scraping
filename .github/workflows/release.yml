name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    # branches:
    # - ag/work
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get release
        shell: bash
        if: env.VERSION == ''
        run: |
          echo "VERSION=$GITHUB_REF_NAME" >> $GITHUB_ENV
          echo "version is: ${{ env.VERSION }}"
      - name: Create release
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release create ${{ env.VERSION }}

  build-release:
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1

    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl
          # - build: win-msvc
          #   os: windows-latest
          #   rust: nightly
          #   target: x86_64-pc-windows-msvc
          # - build: win-gnu
          #   os: windows-latest
          #   rust: nightly-x86_64-gnu
          #   target: x86_64-pc-windows-gnu
          # - build: win32-msvc
          #   os: windows-latest
          #   rust: nightly
          #   target: i686-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          if ! command -V sudo; then
            apt-get update
            apt-get install -y --no-install-recommends sudo
          fi
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            asciidoctor \
            zsh xz-utils liblz4-tool musl-tools \
            brotli zstd

      - name: Install rust
        uses: dtolnay/rust-toolchain@master
        with:
          targets: ${{ matrix.target }}
          toolchain: ${{ matrix.rust }}

      - name: Use Cross
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV
      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build binary
        run: ${{ env.CARGO }} build --release --verbose --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          binary_name = "hcmut_scraping"
          dirname = "$binary_name-${{ needs.create-release.outputs.version}}-${{ matrix.target }}"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.ASSET }}